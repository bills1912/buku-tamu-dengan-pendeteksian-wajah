"""
Django settings for guest_book project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-h=$s9+l$wsns9@(=88-zv5&uckehh5t^h8*tdm)^2s4_wr5=fz"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'guest_system',
    'channels',
    'corsheaders',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "guest_book.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "guest_book.wsgi.application"
ASGI_APPLICATION = 'guest_book.asgi.application'

# WhatsApp Configuration
# Set to True to enable WhatsApp notifications
WHATSAPP_ENABLED = True

# Fonnte API Configuration
WHATSAPP_API_URL = 'https://api.fonnte.com/send'
WHATSAPP_API_TOKEN = 'saJk4PWovXL31HNG6BPo'  # Your Fonnte API token

# WhatsApp Settings
WHATSAPP_SETTINGS = {
    'API_URL': WHATSAPP_API_URL,
    'API_TOKEN': WHATSAPP_API_TOKEN,
    'ENABLED': WHATSAPP_ENABLED,
    'TIMEOUT': 30,  # Request timeout in seconds
    'RETRY_ATTEMPTS': 3,  # Number of retry attempts for failed requests
    'RETRY_DELAY': 5,  # Delay between retries in seconds
}

# Environment-specific WhatsApp settings
if DEBUG:
    # In development, you might want to disable WhatsApp or use test numbers
    WHATSAPP_ENABLED = True  # Set to False to disable in development
    
    # You can override settings for development
    WHATSAPP_TEST_MODE = True
    WHATSAPP_TEST_NUMBERS = [
        '6281367163919',  # Test number for development
    ]
else:
    # Production settings
    WHATSAPP_TEST_MODE = False

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'whatsapp_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'whatsapp.log',
            'maxBytes': 1024*1024*2,  # 2 MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'guest_system': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'guest_system.services.whatsapp_service': {
            'handlers': ['console', 'whatsapp_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,  # Don't propagate to avoid duplicate logs
        },
    },
}
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'buku_tamu',
        'USER': 'postgres',
        'PASSWORD': 'ThinkVision11',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

CORS_ALLOW_ALL_ORIGINS = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Face Recognition Configuration using DeepFace
FACE_RECOGNITION = {
    'ENABLED': True,
    'MODEL': 'Facenet',  # Options: Facenet, Facenet512, VGG-Face, OpenFace, DeepFace, DeepID, ArcFace, Dlib
    'DISTANCE_METRIC': 'cosine',  # Options: cosine, euclidean, euclidean_l2
    'THRESHOLD': 0.4,  # Lower = more strict, Higher = more lenient
    'DETECTOR_BACKEND': 'opencv',  # Options: opencv, ssd, dlib, mtcnn, retinaface
    'ENFORCE_DETECTION': True,
    'ALIGN_FACES': True,
    'NORMALIZATION': 'base',  # Options: base, raw, Facenet, Facenet2018, VGGFace, VGGFace2, ArcFace
}

# Advanced DeepFace Configuration
DEEPFACE_CONFIG = {
    # Model-specific settings dengan threshold yang optimal
    'MODELS': {
        'Facenet': {
            'threshold': 0.4,
            'input_shape': (160, 160),
            'embedding_size': 128,
            'description': 'Google FaceNet model - fast and accurate'
        },
        'Facenet512': {
            'threshold': 0.3,
            'input_shape': (160, 160), 
            'embedding_size': 512,
            'description': 'FaceNet with 512-dimensional embeddings - more accurate'
        },
        'VGG-Face': {
            'threshold': 0.68,
            'input_shape': (224, 224),
            'embedding_size': 2622,
            'description': 'VGG-Face model - classical approach'
        },
        'ArcFace': {
            'threshold': 0.68,
            'input_shape': (112, 112),
            'embedding_size': 512,
            'description': 'ArcFace model - state-of-the-art accuracy'
        },
        'OpenFace': {
            'threshold': 0.1,
            'input_shape': (96, 96),
            'embedding_size': 128,
            'description': 'OpenFace model - lightweight'
        },
        'DeepFace': {
            'threshold': 0.23,
            'input_shape': (152, 152),
            'embedding_size': 4096,
            'description': 'Facebook DeepFace model'
        },
        'SFace': {
            'threshold': 0.593,
            'input_shape': (112, 112),
            'embedding_size': 128,
            'description': 'SFace model - good for edge devices'
        }
    },
    
    # Detection backends dengan karakteristik masing-masing
    'DETECTORS': {
        'opencv': {
            'speed': 'very_fast', 
            'accuracy': 'medium',
            'description': 'Haar Cascade - fastest but less accurate'
        },
        'ssd': {
            'speed': 'fast', 
            'accuracy': 'good',
            'description': 'SSD MobileNet - good balance'
        },
        'dlib': {
            'speed': 'medium', 
            'accuracy': 'good',
            'description': 'HOG + Linear SVM - reliable'
        },
        'mtcnn': {
            'speed': 'slow', 
            'accuracy': 'excellent',
            'description': 'Multi-task CNN - very accurate'
        },
        'retinaface': {
            'speed': 'slow', 
            'accuracy': 'excellent',
            'description': 'RetinaFace - state-of-the-art detection'
        },
    },
    
    # Performance dan Memory Management
    'PERFORMANCE': {
        'CACHE_MODELS': True,              # Cache loaded models in memory
        'GPU_MEMORY_LIMIT': None,          # GPU memory limit dalam MB (None = unlimited)
        'ALLOW_MEMORY_GROWTH': True,       # Allow TensorFlow GPU memory growth
        'BATCH_PROCESSING': False,         # Enable batch processing for multiple faces
        'MAX_FACES_PER_IMAGE': 5,         # Maximum faces to process per image
        'PARALLEL_PROCESSING': False,      # Enable parallel processing (experimental)
        'MODEL_WARMUP': True,             # Warm up models pada startup
    },
    
    # Quality Control Settings
    'QUALITY': {
        'MIN_FACE_SIZE': (30, 30),        # Minimum face size untuk detection
        'MAX_FACE_SIZE': (1000, 1000),    # Maximum face size
        'FACE_CONFIDENCE_THRESHOLD': 0.9, # Minimum confidence untuk face detection
        'BLUR_THRESHOLD': 100,            # Threshold untuk blur detection (Laplacian variance)
        'BRIGHTNESS_RANGE': (50, 200),    # Range kecerahan yang acceptable
        'CONTRAST_THRESHOLD': 0.3,        # Minimum contrast ratio
    },
    
    # Image Processing Settings
    'IMAGE_PROCESSING': {
        'FACE_CROP_MARGIN': 0.2,         # Margin around detected face saat cropping
        'IMAGE_QUALITY': 95,              # JPEG quality untuk saved images
        'RESIZE_METHOD': 'lanczos',       # Resize method: lanczos, bicubic, bilinear
        'COLOR_CONVERSION': 'rgb',        # Color space: rgb, bgr, gray
        'NORMALIZE_LIGHTING': True,       # Normalize lighting conditions
        'HISTOGRAM_EQUALIZATION': False,   # Apply histogram equalization
    },
    
    # Logging dan Debugging
    'LOGGING': {
        'LOG_LEVEL': 'INFO',              # DEBUG, INFO, WARNING, ERROR
        'ENABLE_PERFORMANCE_LOGGING': True, # Log performance metrics
        'LOG_MODEL_LOADING': True,        # Log model loading progress
        'LOG_FACE_DETECTION': True,       # Log face detection results
        'LOG_RECOGNITION_RESULTS': True,  # Log recognition results
        'SAVE_DEBUG_IMAGES': DEBUG,       # Save intermediate images untuk debugging
    },
    
    # Error Handling
    'ERROR_HANDLING': {
        'FALLBACK_DETECTOR': 'opencv',    # Fallback detector jika primary gagal
        'RETRY_ATTEMPTS': 3,              # Number of retry attempts
        'TIMEOUT_SECONDS': 30,            # Timeout untuk processing
        'GRACEFUL_DEGRADATION': True,     # Continue dengan reduced functionality
    }
}

# TensorFlow Configuration (for DeepFace)
import os
os.environ.setdefault('TF_CPP_MIN_LOG_LEVEL', '2')  # Reduce TensorFlow logging

import os
os.environ.setdefault('TF_CPP_MIN_LOG_LEVEL', '2')
os.environ.setdefault('TF_ENABLE_ONEDNN_OPTS', '0')
os.environ.setdefault('CUDA_VISIBLE_DEVICES', '')

# TensorFlow Configuration dengan safe import
TENSORFLOW_CONFIG = {
    'ALLOW_MEMORY_GROWTH': True,
    'MEMORY_LIMIT': None,
    'USE_GPU': False,  # Force CPU
    'SUPPRESS_WARNINGS': True,
}

def configure_tensorflow_safe():
    """Configure TensorFlow dengan error handling"""
    try:
        import tensorflow as tf
        
        # Suppress warnings
        if hasattr(tf, 'get_logger'):
            tf.get_logger().setLevel('ERROR')
        
        # Configure GPU hanya jika tf.config ada
        if hasattr(tf, 'config') and hasattr(tf.config, 'experimental'):
            try:
                gpus = tf.config.experimental.list_physical_devices('GPU')
                if gpus and TENSORFLOW_CONFIG.get('USE_GPU', False):
                    for gpu in gpus:
                        tf.config.experimental.set_memory_growth(gpu, True)
                else:
                    # Force CPU
                    tf.config.set_visible_devices([], 'GPU')
            except Exception as e:
                print(f"GPU config warning: {e}")
        
        return True
    except Exception as e:
        print(f"TensorFlow config error: {e}")
        return False

# Configure TensorFlow saat startup
tensorflow_available = configure_tensorflow_safe()

# Face Recognition Logging
LOGGING['loggers']['guest_system.services.face_recognition_service'] = {
    'handlers': ['console', 'file'],
    'level': 'DEBUG' if DEBUG else 'INFO',
    'propagate': False,
}

# Create logs directory if it doesn't exist
import os
from pathlib import Path
logs_dir = BASE_DIR / 'logs'
logs_dir.mkdir(exist_ok=True)

# Face images storage settings
FACE_IMAGES_SETTINGS = {
    'UPLOAD_PATH': 'face_images/',
    'MAX_FILE_SIZE': 5 * 1024 * 1024,  # 5MB
    'ALLOWED_FORMATS': ['JPEG', 'JPG', 'PNG'],
    'THUMBNAIL_SIZE': (150, 150),
    'ORIGINAL_SIZE': (512, 512),  # Resize large images for consistency
    'QUALITY': 95,
}